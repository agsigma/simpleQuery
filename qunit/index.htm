<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Tests</title>
 
  <link rel="stylesheet" href="qunit-1.18.0.css">
  <script src="qunit-1.18.0.js"></script>  
  <script src="../js/polyfills.js"></script>
  <script src="../js/simpleQuery.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
  <!--<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script>-->
  <style>
		.cssTest {
			font-size: 30px;
		}
  </style>
 
  <script>
	sQ = simpleQuery;
	QUnit.test("sQ: selectors", function( assert ) {
		var done = assert.async();
		var selectors = [
			'#test div',
			'#test [data-city="katowice"]',
			'div div'
		];
		$(function() {
			selectors.forEach(function(selector) {
				var jqres = JSON.stringify($(selector).toArray());
				var sqres = JSON.stringify(sQ(selector).toArray());
				assert.equal(sqres, jqres, 'Selector: ' + selector);
			});
			done()
		});		
	});	
	
	QUnit.test("sQ: find", function( assert ) {
		var done = assert.async();
		var selectors = [
			['#test div', 'div', '(fails if unique is not used)'],
			['#test [data-city="katowice"]', 'div', '']			
		];
		$(function() {
			selectors.forEach(function(selector) {
				var jqres = JSON.stringify($(selector[0]).find(selector[1]).toArray());
				var sqres = JSON.stringify(sQ(selector[0]).find(selector[1]).toArray());
				assert.equal(sqres, jqres, 'Selector: ' + selector[0] + " -> " + selector[1] + '   ' + selector[2]);
			});
			done()
		});		
	});	
	
	QUnit.test("sQ: length, append, addClass, html, detached node", function( assert ) {
		var done = assert.async();		
		var test = function(lib) {
			var el = lib('<div></div>');
			el.append(lib('<span>blabla</span>').addClass('someClass'));
			el.append(lib('<span>notbla</span>').addClass('otherClass'));
			el.find('.otherClass').addClass('superClass');
			return el;
		}
		$(function() {			
			var sqel = test(sQ);
			var jqel = test($);
			assert.equal(sqel.html(), jqel.html(), 'innerHTMLs are equal (cross check with jQuery)');						
			assert.equal(sqel.find('.otherClass').length, 1, 'selector ".otherClass" on detached node, returns 1 element ');			
			assert.equal(sqel.find('.otherClass').html(), jqel.find('.otherClass').html(), 'selector on detached nodes: innerHTMLs are equal (cross check with jQuery)');			
			assert.equal(sqel.find('.otherClass').toArray()[0], sqel.find('.superClass').toArray()[0], 'Every element with class otherClass should have class superClass. Elements comparision.');			
			assert.equal(sqel.find('.superClass').html(), jqel.find('.superClass').html(), 'Every element with class otherClass should have class superClass (cross check with jQuery)');			
			assert.notEqual(sqel.toArray(), jqel.toArray(), 'Nodes are different');			
			done()
		});		
	});		
	QUnit.test("sQ: first, last, eq", function( assert ) {
		var done = assert.async();		
		var test = function(lib) {
			var el = lib('#test div, #test2 div');			
			return el;
		}
		$(function() {			
			var sqel = test(sQ);
			var jqel = test($);			
			assert.equal(sqel.first().html(), jqel.first().html(), '.first(): innerHTMLs are equal (cross check with jQuery)');
			assert.equal(sqel.first().toArray()[0], jqel.first().toArray()[0], '.first(): nodes are equal (cross check with jQuery)');
			assert.equal(sqel.eq(4).html(), 'zyx', '.eq(4): innerHTML equals "zyx"');
			assert.equal(sqel.eq(4).html(), jqel.eq(4).html(), '.eq(4): innerHTMLs are equal (cross check with jQuery)');
			assert.equal(sqel.eq(4).toArray()[0], jqel.eq(4).toArray()[0], '.eq(4): nodes are equal (cross check with jQuery)');
			assert.equal(sqel.last().html(), jqel.last().html(), '.last(): innerHTMLs are equal (cross check with jQuery)');
			assert.equal(sqel.last().toArray()[0], jqel.last().toArray()[0], '.last(): nodes are equal (cross check with jQuery)');			
			done()
		});		
	});		
	
	QUnit.test("sQ: length, append, addClass, html, detached node", function( assert ) {
		var done = assert.async();		
		var test = function(lib) {
			var el = lib('<div></div>');
			el.append(lib('<span>blabla</span>').addClass('someClass'));
			el.append(lib('<span>notbla</span>').addClass('otherClass'));
			el.find('.otherClass').addClass('superClass');
			return el;
		}
		$(function() {			
			var sqel = test(sQ);
			var jqel = test($);
			assert.equal(sqel.html(), jqel.html(), 'innerHTMLs are equal (cross check with jQuery)');						
			assert.equal(sqel.find('.otherClass').length, 1, 'selector ".otherClass" on detached node, returns 1 element ');			
			assert.equal(sqel.find('.otherClass').html(), jqel.find('.otherClass').html(), 'selector on detached nodes: innerHTMLs are equal (cross check with jQuery)');			
			assert.equal(sqel.find('.otherClass').toArray()[0], sqel.find('.superClass').toArray()[0], 'Every element with class otherClass should have class superClass. Elements comparision.');			
			assert.equal(sqel.find('.superClass').html(), jqel.find('.superClass').html(), 'Every element with class otherClass should have class superClass (cross check with jQuery)');			
			assert.notEqual(sqel.toArray(), jqel.toArray(), 'Nodes are different');			
			done()
		});		
	});		
	QUnit.test("sQ: css", function( assert ) {		
		var test = function(lib) {
			var el = lib('<div>fn.css test</div>').addClass('cssTest');			
			el
				.css({color: 'yellowgreen', border: '2px solid yellowgreen'})
				.append( lib('<span> dont fail</span>').css('color', 'navy') );			
			return el;
		}
		$(function() {			
			var sqel = test(sQ);
			var jqel = test($);			
			sQ('body')
				.append( sQ('<h2>fn.css test</h2>') )
				.append( sQ('<h3>jQuery res</h3>') )
				.append( jqel )
				.append( sQ('<h3>simpleQuery res</h3>') )
				.append( sqel );
				
			assert.notEqual(
				sqel.css('width'), 
				jqel.css('width'), 
				'css("width") aren\'t equal (cross check with jQuery) = ' + jqel.css('width') +
				' - simpleQuery doesnt check defaults and values defined in stylesheets'
			);
			assert.notEqual(sqel.css('color'), jqel.css('color'), 'css("color") aren\'t equal  ' + 
                ' - simpleQuery doesn\'t return color value in rgba');			
			assert.notEqual(
				sqel.find('span').css('color'), 
				jqel.find('span').css('color'), 
				'find("span").css("color") aren\'t equal (simpleQuery doesn\'t return color value in rgba)'
			);			
			assert.notEqual(
				sqel.css('border'), 
				jqel.css('border'), 
				'css("border") aren\'t equal (simpleQuery doesn\'t return color value in rgba)'
			);						
			assert.notEqual(
				sqel.find('span').css('border'), 
				jqel.find('span').css('border'), 
				'find("span").css("border") aren\t equal (cross check with jQuery) - ' +
				'simpleQuery doesn\'t check defaults and values defined in stylesheets'
			);						
			assert.equal(
				sqel.css({'background': 'transparent'}).html(), 
				jqel.css({'background': 'transparent'}).html(), 
				'elements returned from css are identical (cross check with jQuery using .html())'
			);	
			
			sqel.css('fontSize', '40px');
			jqel.css('fontSize', '40px');
			assert.equal(
				sqel.css('fontSize'), 
				jqel.css('fontSize'), 
				'css("fontSize") are equal (cross check with jQuery) = ' + jqel.css('fontSize')
			);
			sqel.css('fontSize', '');
			jqel.css('fontSize',  '');
			assert.notEqual(
				sqel.css('fontSize'), 
				jqel.css('fontSize'), 
				'css("fontSize") aren\'t equal after removal of property(cross check with jQuery) - simpleQuery doesnt check values defined in stylesheets'
			);			
		});		
	});		
	QUnit.test("sQ: Speed test", function( assert ) {		
		var test = function(lib, className, iterations) {
			var time = +(new Date());
			var selector = ' .' + className;
			var l = 0;
			var l1, callback = function(e) { 
				console.log(this); 
				lib(this)
					.css('color', 'green')
					.css({
						'border': '2px solid red',
						'padding': '4px'
					}); 
			};
			var clickCallback = function() { alert('click!'); };
			var f = function(lib, selector, className) { 				
				// console.log(selector, lib(selector).length, lib(selector));
				/*lib(selector).append( 
					lib('<div class="' + className + '">! </div>')
						.html('-' + (l++) + '-')
						.css('display', 'inline-block')
						.bind('mouseover', callback)
						.bind('click', clickCallback)
				);*/ 
				lib(selector).each(function() {
					lib(this).append( 
						lib('<div class="' + className + '">! </div>')
						.html('-' + (l++) + '-')
						.css('display', 'inline-block')
						.bind('mouseover', callback)
						.bind('click', clickCallback)
					);
				});
			}
			f(lib, '#speedTest', className);		
			for(l1=0; l1<iterations; l1++) {		
				f(lib, '.' + className, className);
			}
			lib(selector).css('color', 'red');
			lib(selector + selector).css('color', 'green');
			lib(selector + selector + selector).css('color', 'blue');
			lib(selector + selector + selector + selector).css('color', 'black');
			lib('.' + className).attr('href', 'http://www.wp.pl');
			lib('.'+className).each(function() {			
				var parent = lib(this).parent();
				var a = lib('<a>?</a>').attr('href', lib(this).parent().attr('href') || "").append( lib(this).detach() );
				parent.append(a);
			});			
			console.log(lib, +(new Date()) - time, 'ms');
			return +(new Date()) - time;
		}
		$(function() {						
			var sQtime = test(sQ, 'aaa', 12);			
			var jQtime = test($, 'bbb', 12);						
			assert.ok(sQtime < jQtime, 'sQ time: ' + sQtime + ';  jQuery time: ' + jQtime);
			$('#speedTest').empty();
		});
		$(function() {			
			$('body #speedTest').append( $('<h2>sQ test </h2>') );
			var sQtime = test(sQ, 'aaa', 4);
			$('body #speedTest').append( $('<h2>jQ test </h2>') );
			var jQtime = test($, 'bbb', 4);						
		});
	});		
  </script>
</head>
<body>
 
<div id="qunit"></div>
<div id="test">
	<div>a121</div>
	<div>
		<div data-city="katowice">aaa212</div>
		<div>
			<div>zyx</div>
		</div>
	</div>
</div>

<div id="test2">
	<div>a</div>
	<div>
		<div data-city="katowice">aaa</div>
		<div>
			<div>xyz</div>
		</div>
	</div>	
</div> 

<div id="speedTest">
</div>
</body>
</html>
